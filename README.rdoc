= Connie
==== Little compact library to synthesise data that does not load big files in memory.

Heavily based on Forgery[http://github.com/sevenwire/forgery.git] it uses the same word sources. It's built to be a bit more customisable and allows you to define new strategies and styles both using ruby modules or big text lists.

== Install

On the console:
    >> gem install connie
    
In your Gemfile
    gem 'connie'

== Usage

Connie offers four exciting functionalities:
  
* Dictionaries
* Shorthand to pick a random element from an array
* Interpolating strings

===Dictionaries

A dictionary is a vast source of words for a subject, Connie has 4 dictionaries built in:

* Names
* Geo
* Net
* Creative
* Shopping

For example inspecting the names dictionary:
    Connie[:names].inspect # Shorthand to access a dictionary
    <Connie::Dictionary - Connie::Names - company last female suffix title male first gender>
You receive a quick overview of what this dictionary can generate. To have the dictionary generate something simply:
    Connie[:names].first
    
===Interpolations

Interpolations happen in a dictionary but allow to reach others through scoping
    >> Connie[:names].interpolate "Mr. :male :last: :geo.city, :geo.state_short"
    #=> "Mr. Mark Taylor: Pleasant Hill, NY"

A shorthand method  _i_ is provided for convenience and interpolation is also available through the global method:
   Connie(':names.male :names.last')

== Extending
You can extend Dictionaries in two ways:

* Providing word list files inside folder registered with connie:
  * putting the _word_name_ file into the _dictionary_name_ folder
  * creating a _dictionary_name_._word_name_
* Anywhere in your code by adding instance methods to the Connie::_DictionaryName_ module

The first way will ensure that calling the word type a line is randomly picked from the list; the second is useful to aggregate different words from the lists and present the in different ways:

    # e.g. Extending the names dictionary to return a full name
    module Connie
      module Names
        # Returns a full name
        def full
          "#{first} #{last}"
        end    
      end
    end

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Leandro Pedroni. See LICENSE for details.
